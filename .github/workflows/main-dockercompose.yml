name: CI/CD Pipeline with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2️⃣ Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17

      # 3️⃣ Build the app JAR (skip tests here)
      - name: Build Application Jar
        run: mvn -B clean package -DskipTests

      # 4️⃣ Start MySQL + Spring App using Docker Compose
      - name: Start Services with Docker Compose
        run: docker compose up -d
#        for logs
      - name: Debug containers
        run: |
          echo "==== Running Containers ===="
          docker ps -a
          echo "==== Logs from Spring Boot container ===="
          docker logs security || true
          echo "==== Logs from MySQL container ===="
          docker logs mysqldb || true
        env:
          SPRING_PROFILES_ACTIVE: docker

      # 5️⃣ Wait for the containers to be ready
      - name: Wait for Spring Boot to start
        run: |
          echo "Waiting for Spring Boot to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep -q 'UP'; then
              echo "Spring Boot is up!"
              exit 0
            fi
            echo "Waiting..."
            sleep 5
          done
          echo "Spring Boot did not start in time" && exit 1

      # 6️⃣ Run integration tests (connect to MySQL in the running containers)
      - name: Run Integration Tests
        run: mvn verify
        env:
          SPRING_PROFILES_ACTIVE: docker

      # 7️⃣ Stop Docker Compose after tests
      - name: Stop Docker Compose
        if: always()
        run: docker compose down

      # 8️⃣ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 9️⃣ Generate unique image tag
      - name: Generate Image Tag
        id: vars
        run: echo "TAG=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      # 🔟 Build & Push Docker Image (only if tests passed)
      - name: Build & Push Docker Image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/security-project:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/security-project:${{ env.TAG }}
